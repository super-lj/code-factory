// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ci

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Name
//  - BranchNames
//  - CommitHashs
//  - MaxRunNum
type RepoInfo struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  BranchNames []string `thrift:"branchNames,2" db:"branchNames" json:"branchNames"`
  CommitHashs []string `thrift:"commitHashs,3" db:"commitHashs" json:"commitHashs"`
  MaxRunNum int32 `thrift:"maxRunNum,4" db:"maxRunNum" json:"maxRunNum"`
}

func NewRepoInfo() *RepoInfo {
  return &RepoInfo{}
}


func (p *RepoInfo) GetName() string {
  return p.Name
}

func (p *RepoInfo) GetBranchNames() []string {
  return p.BranchNames
}

func (p *RepoInfo) GetCommitHashs() []string {
  return p.CommitHashs
}

func (p *RepoInfo) GetMaxRunNum() int32 {
  return p.MaxRunNum
}
func (p *RepoInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RepoInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *RepoInfo)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.BranchNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.BranchNames = append(p.BranchNames, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RepoInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.CommitHashs =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.CommitHashs = append(p.CommitHashs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RepoInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxRunNum = v
}
  return nil
}

func (p *RepoInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RepoInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RepoInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *RepoInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("branchNames", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:branchNames: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.BranchNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BranchNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:branchNames: ", p), err) }
  return err
}

func (p *RepoInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commitHashs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:commitHashs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.CommitHashs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CommitHashs {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:commitHashs: ", p), err) }
  return err
}

func (p *RepoInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxRunNum", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxRunNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxRunNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxRunNum (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxRunNum: ", p), err) }
  return err
}

func (p *RepoInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RepoInfo(%+v)", *p)
}

// Attributes:
//  - Name
//  - CommitHash
//  - RunNums
type BranchInfo struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  CommitHash string `thrift:"commitHash,2" db:"commitHash" json:"commitHash"`
  RunNums []int32 `thrift:"runNums,3" db:"runNums" json:"runNums"`
}

func NewBranchInfo() *BranchInfo {
  return &BranchInfo{}
}


func (p *BranchInfo) GetName() string {
  return p.Name
}

func (p *BranchInfo) GetCommitHash() string {
  return p.CommitHash
}

func (p *BranchInfo) GetRunNums() []int32 {
  return p.RunNums
}
func (p *BranchInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BranchInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *BranchInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CommitHash = v
}
  return nil
}

func (p *BranchInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.RunNums =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.RunNums = append(p.RunNums, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BranchInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BranchInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BranchInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *BranchInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commitHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commitHash: ", p), err) }
  if err := oprot.WriteString(string(p.CommitHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commitHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commitHash: ", p), err) }
  return err
}

func (p *BranchInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runNums", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:runNums: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.RunNums)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RunNums {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:runNums: ", p), err) }
  return err
}

func (p *BranchInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BranchInfo(%+v)", *p)
}

// Attributes:
//  - Hash
//  - Msg
//  - Author
//  - RunNums
type CommitInfo struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
  Author string `thrift:"author,3" db:"author" json:"author"`
  RunNums []int32 `thrift:"runNums,4" db:"runNums" json:"runNums"`
}

func NewCommitInfo() *CommitInfo {
  return &CommitInfo{}
}


func (p *CommitInfo) GetHash() string {
  return p.Hash
}

func (p *CommitInfo) GetMsg() string {
  return p.Msg
}

func (p *CommitInfo) GetAuthor() string {
  return p.Author
}

func (p *CommitInfo) GetRunNums() []int32 {
  return p.RunNums
}
func (p *CommitInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommitInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *CommitInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *CommitInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Author = v
}
  return nil
}

func (p *CommitInfo)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.RunNums =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.RunNums = append(p.RunNums, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommitInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommitInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommitInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *CommitInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *CommitInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("author", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:author: ", p), err) }
  if err := oprot.WriteString(string(p.Author)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.author (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:author: ", p), err) }
  return err
}

func (p *CommitInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runNums", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:runNums: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.RunNums)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RunNums {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:runNums: ", p), err) }
  return err
}

func (p *CommitInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommitInfo(%+v)", *p)
}

// Attributes:
//  - Num
//  - StartTimestamp
//  - Duration
//  - Status
//  - Log
//  - BranchName
//  - CommitHash
type RunInfo struct {
  Num int32 `thrift:"num,1" db:"num" json:"num"`
  StartTimestamp int32 `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp"`
  Duration int32 `thrift:"duration,3" db:"duration" json:"duration"`
  Status string `thrift:"status,4" db:"status" json:"status"`
  Log string `thrift:"log,5" db:"log" json:"log"`
  BranchName string `thrift:"branchName,6" db:"branchName" json:"branchName"`
  CommitHash string `thrift:"commitHash,7" db:"commitHash" json:"commitHash"`
}

func NewRunInfo() *RunInfo {
  return &RunInfo{}
}


func (p *RunInfo) GetNum() int32 {
  return p.Num
}

func (p *RunInfo) GetStartTimestamp() int32 {
  return p.StartTimestamp
}

func (p *RunInfo) GetDuration() int32 {
  return p.Duration
}

func (p *RunInfo) GetStatus() string {
  return p.Status
}

func (p *RunInfo) GetLog() string {
  return p.Log
}

func (p *RunInfo) GetBranchName() string {
  return p.BranchName
}

func (p *RunInfo) GetCommitHash() string {
  return p.CommitHash
}
func (p *RunInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num = v
}
  return nil
}

func (p *RunInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *RunInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *RunInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RunInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Log = v
}
  return nil
}

func (p *RunInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BranchName = v
}
  return nil
}

func (p *RunInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CommitHash = v
}
  return nil
}

func (p *RunInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RunInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num: ", p), err) }
  if err := oprot.WriteI32(int32(p.Num)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num: ", p), err) }
  return err
}

func (p *RunInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTimestamp", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err) }
  return err
}

func (p *RunInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("duration", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:duration: ", p), err) }
  if err := oprot.WriteI32(int32(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:duration: ", p), err) }
  return err
}

func (p *RunInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *RunInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("log", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:log: ", p), err) }
  if err := oprot.WriteString(string(p.Log)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:log: ", p), err) }
  return err
}

func (p *RunInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("branchName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branchName: ", p), err) }
  if err := oprot.WriteString(string(p.BranchName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.branchName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branchName: ", p), err) }
  return err
}

func (p *RunInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commitHash", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:commitHash: ", p), err) }
  if err := oprot.WriteString(string(p.CommitHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commitHash (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:commitHash: ", p), err) }
  return err
}

func (p *RunInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunInfo(%+v)", *p)
}

type CIBackend interface {
  GetRepoNames(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - Name
  GetRepoInfo(ctx context.Context, name string) (r *RepoInfo, err error)
  // Parameters:
  //  - RepoName
  //  - BranchName
  GetBranchInfo(ctx context.Context, repoName string, branchName string) (r *BranchInfo, err error)
  // Parameters:
  //  - RepoName
  //  - CommitHash
  GetCommitInfo(ctx context.Context, repoName string, commitHash string) (r *CommitInfo, err error)
  // Parameters:
  //  - RepoName
  //  - RunNum
  GetRunInfo(ctx context.Context, repoName string, runNum int32) (r *RunInfo, err error)
}

type CIBackendClient struct {
  c thrift.TClient
}

func NewCIBackendClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CIBackendClient {
  return &CIBackendClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCIBackendClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CIBackendClient {
  return &CIBackendClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCIBackendClient(c thrift.TClient) *CIBackendClient {
  return &CIBackendClient{
    c: c,
  }
}

func (p *CIBackendClient) Client_() thrift.TClient {
  return p.c
}
func (p *CIBackendClient) GetRepoNames(ctx context.Context) (r []string, err error) {
  var _args4 CIBackendGetRepoNamesArgs
  var _result5 CIBackendGetRepoNamesResult
  if err = p.Client_().Call(ctx, "getRepoNames", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Name
func (p *CIBackendClient) GetRepoInfo(ctx context.Context, name string) (r *RepoInfo, err error) {
  var _args6 CIBackendGetRepoInfoArgs
  _args6.Name = name
  var _result7 CIBackendGetRepoInfoResult
  if err = p.Client_().Call(ctx, "getRepoInfo", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - RepoName
//  - BranchName
func (p *CIBackendClient) GetBranchInfo(ctx context.Context, repoName string, branchName string) (r *BranchInfo, err error) {
  var _args8 CIBackendGetBranchInfoArgs
  _args8.RepoName = repoName
  _args8.BranchName = branchName
  var _result9 CIBackendGetBranchInfoResult
  if err = p.Client_().Call(ctx, "getBranchInfo", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - RepoName
//  - CommitHash
func (p *CIBackendClient) GetCommitInfo(ctx context.Context, repoName string, commitHash string) (r *CommitInfo, err error) {
  var _args10 CIBackendGetCommitInfoArgs
  _args10.RepoName = repoName
  _args10.CommitHash = commitHash
  var _result11 CIBackendGetCommitInfoResult
  if err = p.Client_().Call(ctx, "getCommitInfo", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - RepoName
//  - RunNum
func (p *CIBackendClient) GetRunInfo(ctx context.Context, repoName string, runNum int32) (r *RunInfo, err error) {
  var _args12 CIBackendGetRunInfoArgs
  _args12.RepoName = repoName
  _args12.RunNum = runNum
  var _result13 CIBackendGetRunInfoResult
  if err = p.Client_().Call(ctx, "getRunInfo", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

type CIBackendProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CIBackend
}

func (p *CIBackendProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CIBackendProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CIBackendProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCIBackendProcessor(handler CIBackend) *CIBackendProcessor {

  self14 := &CIBackendProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self14.processorMap["getRepoNames"] = &cIBackendProcessorGetRepoNames{handler:handler}
  self14.processorMap["getRepoInfo"] = &cIBackendProcessorGetRepoInfo{handler:handler}
  self14.processorMap["getBranchInfo"] = &cIBackendProcessorGetBranchInfo{handler:handler}
  self14.processorMap["getCommitInfo"] = &cIBackendProcessorGetCommitInfo{handler:handler}
  self14.processorMap["getRunInfo"] = &cIBackendProcessorGetRunInfo{handler:handler}
return self14
}

func (p *CIBackendProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x15

}

type cIBackendProcessorGetRepoNames struct {
  handler CIBackend
}

func (p *cIBackendProcessorGetRepoNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CIBackendGetRepoNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRepoNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CIBackendGetRepoNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetRepoNames(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRepoNames: " + err2.Error())
    oprot.WriteMessageBegin("getRepoNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRepoNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cIBackendProcessorGetRepoInfo struct {
  handler CIBackend
}

func (p *cIBackendProcessorGetRepoInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CIBackendGetRepoInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRepoInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CIBackendGetRepoInfoResult{}
var retval *RepoInfo
  var err2 error
  if retval, err2 = p.handler.GetRepoInfo(ctx, args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRepoInfo: " + err2.Error())
    oprot.WriteMessageBegin("getRepoInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRepoInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cIBackendProcessorGetBranchInfo struct {
  handler CIBackend
}

func (p *cIBackendProcessorGetBranchInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CIBackendGetBranchInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBranchInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CIBackendGetBranchInfoResult{}
var retval *BranchInfo
  var err2 error
  if retval, err2 = p.handler.GetBranchInfo(ctx, args.RepoName, args.BranchName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBranchInfo: " + err2.Error())
    oprot.WriteMessageBegin("getBranchInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBranchInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cIBackendProcessorGetCommitInfo struct {
  handler CIBackend
}

func (p *cIBackendProcessorGetCommitInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CIBackendGetCommitInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCommitInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CIBackendGetCommitInfoResult{}
var retval *CommitInfo
  var err2 error
  if retval, err2 = p.handler.GetCommitInfo(ctx, args.RepoName, args.CommitHash); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommitInfo: " + err2.Error())
    oprot.WriteMessageBegin("getCommitInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCommitInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cIBackendProcessorGetRunInfo struct {
  handler CIBackend
}

func (p *cIBackendProcessorGetRunInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CIBackendGetRunInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRunInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CIBackendGetRunInfoResult{}
var retval *RunInfo
  var err2 error
  if retval, err2 = p.handler.GetRunInfo(ctx, args.RepoName, args.RunNum); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunInfo: " + err2.Error())
    oprot.WriteMessageBegin("getRunInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRunInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type CIBackendGetRepoNamesArgs struct {
}

func NewCIBackendGetRepoNamesArgs() *CIBackendGetRepoNamesArgs {
  return &CIBackendGetRepoNamesArgs{}
}

func (p *CIBackendGetRepoNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetRepoNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRepoNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetRepoNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetRepoNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CIBackendGetRepoNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCIBackendGetRepoNamesResult() *CIBackendGetRepoNamesResult {
  return &CIBackendGetRepoNamesResult{}
}

var CIBackendGetRepoNamesResult_Success_DEFAULT []string

func (p *CIBackendGetRepoNamesResult) GetSuccess() []string {
  return p.Success
}
func (p *CIBackendGetRepoNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CIBackendGetRepoNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetRepoNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Success = append(p.Success, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CIBackendGetRepoNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRepoNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetRepoNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CIBackendGetRepoNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetRepoNamesResult(%+v)", *p)
}

// Attributes:
//  - Name
type CIBackendGetRepoInfoArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewCIBackendGetRepoInfoArgs() *CIBackendGetRepoInfoArgs {
  return &CIBackendGetRepoInfoArgs{}
}


func (p *CIBackendGetRepoInfoArgs) GetName() string {
  return p.Name
}
func (p *CIBackendGetRepoInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetRepoInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CIBackendGetRepoInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRepoInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetRepoInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *CIBackendGetRepoInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetRepoInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CIBackendGetRepoInfoResult struct {
  Success *RepoInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCIBackendGetRepoInfoResult() *CIBackendGetRepoInfoResult {
  return &CIBackendGetRepoInfoResult{}
}

var CIBackendGetRepoInfoResult_Success_DEFAULT *RepoInfo
func (p *CIBackendGetRepoInfoResult) GetSuccess() *RepoInfo {
  if !p.IsSetSuccess() {
    return CIBackendGetRepoInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *CIBackendGetRepoInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CIBackendGetRepoInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetRepoInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RepoInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CIBackendGetRepoInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRepoInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetRepoInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CIBackendGetRepoInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetRepoInfoResult(%+v)", *p)
}

// Attributes:
//  - RepoName
//  - BranchName
type CIBackendGetBranchInfoArgs struct {
  RepoName string `thrift:"repoName,1" db:"repoName" json:"repoName"`
  BranchName string `thrift:"branchName,2" db:"branchName" json:"branchName"`
}

func NewCIBackendGetBranchInfoArgs() *CIBackendGetBranchInfoArgs {
  return &CIBackendGetBranchInfoArgs{}
}


func (p *CIBackendGetBranchInfoArgs) GetRepoName() string {
  return p.RepoName
}

func (p *CIBackendGetBranchInfoArgs) GetBranchName() string {
  return p.BranchName
}
func (p *CIBackendGetBranchInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetBranchInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RepoName = v
}
  return nil
}

func (p *CIBackendGetBranchInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BranchName = v
}
  return nil
}

func (p *CIBackendGetBranchInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBranchInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetBranchInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("repoName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:repoName: ", p), err) }
  if err := oprot.WriteString(string(p.RepoName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.repoName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:repoName: ", p), err) }
  return err
}

func (p *CIBackendGetBranchInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("branchName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:branchName: ", p), err) }
  if err := oprot.WriteString(string(p.BranchName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.branchName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:branchName: ", p), err) }
  return err
}

func (p *CIBackendGetBranchInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetBranchInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CIBackendGetBranchInfoResult struct {
  Success *BranchInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCIBackendGetBranchInfoResult() *CIBackendGetBranchInfoResult {
  return &CIBackendGetBranchInfoResult{}
}

var CIBackendGetBranchInfoResult_Success_DEFAULT *BranchInfo
func (p *CIBackendGetBranchInfoResult) GetSuccess() *BranchInfo {
  if !p.IsSetSuccess() {
    return CIBackendGetBranchInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *CIBackendGetBranchInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CIBackendGetBranchInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetBranchInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &BranchInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CIBackendGetBranchInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBranchInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetBranchInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CIBackendGetBranchInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetBranchInfoResult(%+v)", *p)
}

// Attributes:
//  - RepoName
//  - CommitHash
type CIBackendGetCommitInfoArgs struct {
  RepoName string `thrift:"repoName,1" db:"repoName" json:"repoName"`
  CommitHash string `thrift:"commitHash,2" db:"commitHash" json:"commitHash"`
}

func NewCIBackendGetCommitInfoArgs() *CIBackendGetCommitInfoArgs {
  return &CIBackendGetCommitInfoArgs{}
}


func (p *CIBackendGetCommitInfoArgs) GetRepoName() string {
  return p.RepoName
}

func (p *CIBackendGetCommitInfoArgs) GetCommitHash() string {
  return p.CommitHash
}
func (p *CIBackendGetCommitInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetCommitInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RepoName = v
}
  return nil
}

func (p *CIBackendGetCommitInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CommitHash = v
}
  return nil
}

func (p *CIBackendGetCommitInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommitInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetCommitInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("repoName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:repoName: ", p), err) }
  if err := oprot.WriteString(string(p.RepoName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.repoName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:repoName: ", p), err) }
  return err
}

func (p *CIBackendGetCommitInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commitHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commitHash: ", p), err) }
  if err := oprot.WriteString(string(p.CommitHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commitHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commitHash: ", p), err) }
  return err
}

func (p *CIBackendGetCommitInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetCommitInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CIBackendGetCommitInfoResult struct {
  Success *CommitInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCIBackendGetCommitInfoResult() *CIBackendGetCommitInfoResult {
  return &CIBackendGetCommitInfoResult{}
}

var CIBackendGetCommitInfoResult_Success_DEFAULT *CommitInfo
func (p *CIBackendGetCommitInfoResult) GetSuccess() *CommitInfo {
  if !p.IsSetSuccess() {
    return CIBackendGetCommitInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *CIBackendGetCommitInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CIBackendGetCommitInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetCommitInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CommitInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CIBackendGetCommitInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommitInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetCommitInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CIBackendGetCommitInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetCommitInfoResult(%+v)", *p)
}

// Attributes:
//  - RepoName
//  - RunNum
type CIBackendGetRunInfoArgs struct {
  RepoName string `thrift:"repoName,1" db:"repoName" json:"repoName"`
  RunNum int32 `thrift:"runNum,2" db:"runNum" json:"runNum"`
}

func NewCIBackendGetRunInfoArgs() *CIBackendGetRunInfoArgs {
  return &CIBackendGetRunInfoArgs{}
}


func (p *CIBackendGetRunInfoArgs) GetRepoName() string {
  return p.RepoName
}

func (p *CIBackendGetRunInfoArgs) GetRunNum() int32 {
  return p.RunNum
}
func (p *CIBackendGetRunInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetRunInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RepoName = v
}
  return nil
}

func (p *CIBackendGetRunInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunNum = v
}
  return nil
}

func (p *CIBackendGetRunInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRunInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetRunInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("repoName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:repoName: ", p), err) }
  if err := oprot.WriteString(string(p.RepoName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.repoName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:repoName: ", p), err) }
  return err
}

func (p *CIBackendGetRunInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runNum", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.RunNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runNum (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runNum: ", p), err) }
  return err
}

func (p *CIBackendGetRunInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetRunInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CIBackendGetRunInfoResult struct {
  Success *RunInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCIBackendGetRunInfoResult() *CIBackendGetRunInfoResult {
  return &CIBackendGetRunInfoResult{}
}

var CIBackendGetRunInfoResult_Success_DEFAULT *RunInfo
func (p *CIBackendGetRunInfoResult) GetSuccess() *RunInfo {
  if !p.IsSetSuccess() {
    return CIBackendGetRunInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *CIBackendGetRunInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CIBackendGetRunInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CIBackendGetRunInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RunInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CIBackendGetRunInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRunInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CIBackendGetRunInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CIBackendGetRunInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CIBackendGetRunInfoResult(%+v)", *p)
}


